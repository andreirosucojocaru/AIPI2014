package ro.pub.cs.aipi.lab05.reservation;


/**
* reservation/_ReservationServiceStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from Reservation.idl
* Monday, November 10, 2014 3:19:56 AM EET
*/

public class _ReservationServiceStub extends org.omg.CORBA.portable.ObjectImpl implements ro.pub.cs.aipi.lab05.reservation.ReservationService
{

  public ro.pub.cs.aipi.lab05.reservation.Interval[] getTimeTable () throws ro.pub.cs.aipi.lab05.reservation.UnspecifiedTimeTable
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getTimeTable", true);
                $in = _invoke ($out);
                ro.pub.cs.aipi.lab05.reservation.Interval $result[] = ro.pub.cs.aipi.lab05.reservation.IntervalsHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:reservation/UnspecifiedTimeTable:1.0"))
                    throw ro.pub.cs.aipi.lab05.reservation.UnspecifiedTimeTableHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getTimeTable (        );
            } finally {
                _releaseReply ($in);
            }
  } // getTimeTable

  public int getAvailableSeats (ro.pub.cs.aipi.lab05.reservation.Interval interval) throws ro.pub.cs.aipi.lab05.reservation.UnspecifiedTimeTable
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getAvailableSeats", true);
                ro.pub.cs.aipi.lab05.reservation.IntervalHelper.write ($out, interval);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:reservation/UnspecifiedTimeTable:1.0"))
                    throw ro.pub.cs.aipi.lab05.reservation.UnspecifiedTimeTableHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getAvailableSeats (interval        );
            } finally {
                _releaseReply ($in);
            }
  } // getAvailableSeats

  public boolean makeReservation (int customerId, ro.pub.cs.aipi.lab05.reservation.Interval interval, int numberOfSeats) throws ro.pub.cs.aipi.lab05.reservation.UnspecifiedTimeTable
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("makeReservation", true);
                $out.write_long (customerId);
                ro.pub.cs.aipi.lab05.reservation.IntervalHelper.write ($out, interval);
                $out.write_long (numberOfSeats);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:reservation/UnspecifiedTimeTable:1.0"))
                    throw ro.pub.cs.aipi.lab05.reservation.UnspecifiedTimeTableHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return makeReservation (customerId, interval, numberOfSeats        );
            } finally {
                _releaseReply ($in);
            }
  } // makeReservation

  public boolean cancelReservation (int customerId, ro.pub.cs.aipi.lab05.reservation.Interval interval) throws ro.pub.cs.aipi.lab05.reservation.UnspecifiedTimeTable
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("cancelReservation", true);
                $out.write_long (customerId);
                ro.pub.cs.aipi.lab05.reservation.IntervalHelper.write ($out, interval);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:reservation/UnspecifiedTimeTable:1.0"))
                    throw ro.pub.cs.aipi.lab05.reservation.UnspecifiedTimeTableHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return cancelReservation (customerId, interval        );
            } finally {
                _releaseReply ($in);
            }
  } // cancelReservation

  public ro.pub.cs.aipi.lab05.reservation.ReservationInformation[] getReservations (int customerId) throws ro.pub.cs.aipi.lab05.reservation.UnspecifiedTimeTable
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getReservations", true);
                $out.write_long (customerId);
                $in = _invoke ($out);
                ro.pub.cs.aipi.lab05.reservation.ReservationInformation $result[] = ro.pub.cs.aipi.lab05.reservation.ReservationsHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:reservation/UnspecifiedTimeTable:1.0"))
                    throw ro.pub.cs.aipi.lab05.reservation.UnspecifiedTimeTableHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getReservations (customerId        );
            } finally {
                _releaseReply ($in);
            }
  } // getReservations

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:reservation/ReservationService:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _ReservationServiceStub
