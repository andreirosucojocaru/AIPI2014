package ro.pub.cs.aipi.lab05.reservation;


/**
* reservation/ReservationServicePOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from Reservation.idl
* Monday, November 10, 2014 3:20:14 AM EET
*/

public abstract class ReservationServicePOA extends org.omg.PortableServer.Servant
 implements ro.pub.cs.aipi.lab05.reservation.ReservationServiceOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("getTimeTable", new java.lang.Integer (0));
    _methods.put ("getAvailableSeats", new java.lang.Integer (1));
    _methods.put ("makeReservation", new java.lang.Integer (2));
    _methods.put ("cancelReservation", new java.lang.Integer (3));
    _methods.put ("getReservations", new java.lang.Integer (4));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // reservation/ReservationService/getTimeTable
       {
         try {
           ro.pub.cs.aipi.lab05.reservation.Interval $result[] = null;
           $result = this.getTimeTable ();
           out = $rh.createReply();
           ro.pub.cs.aipi.lab05.reservation.IntervalsHelper.write (out, $result);
         } catch (ro.pub.cs.aipi.lab05.reservation.UnspecifiedTimeTable $ex) {
           out = $rh.createExceptionReply ();
           ro.pub.cs.aipi.lab05.reservation.UnspecifiedTimeTableHelper.write (out, $ex);
         }
         break;
       }

       case 1:  // reservation/ReservationService/getAvailableSeats
       {
         try {
           ro.pub.cs.aipi.lab05.reservation.Interval interval = ro.pub.cs.aipi.lab05.reservation.IntervalHelper.read (in);
           int $result = (int)0;
           $result = this.getAvailableSeats (interval);
           out = $rh.createReply();
           out.write_long ($result);
         } catch (ro.pub.cs.aipi.lab05.reservation.UnspecifiedTimeTable $ex) {
           out = $rh.createExceptionReply ();
           ro.pub.cs.aipi.lab05.reservation.UnspecifiedTimeTableHelper.write (out, $ex);
         }
         break;
       }

       case 2:  // reservation/ReservationService/makeReservation
       {
         try {
           int customerId = in.read_long ();
           ro.pub.cs.aipi.lab05.reservation.Interval interval = ro.pub.cs.aipi.lab05.reservation.IntervalHelper.read (in);
           int numberOfSeats = in.read_long ();
           boolean $result = false;
           $result = this.makeReservation (customerId, interval, numberOfSeats);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (ro.pub.cs.aipi.lab05.reservation.UnspecifiedTimeTable $ex) {
           out = $rh.createExceptionReply ();
           ro.pub.cs.aipi.lab05.reservation.UnspecifiedTimeTableHelper.write (out, $ex);
         }
         break;
       }

       case 3:  // reservation/ReservationService/cancelReservation
       {
         try {
           int customerId = in.read_long ();
           ro.pub.cs.aipi.lab05.reservation.Interval interval = ro.pub.cs.aipi.lab05.reservation.IntervalHelper.read (in);
           boolean $result = false;
           $result = this.cancelReservation (customerId, interval);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (ro.pub.cs.aipi.lab05.reservation.UnspecifiedTimeTable $ex) {
           out = $rh.createExceptionReply ();
           ro.pub.cs.aipi.lab05.reservation.UnspecifiedTimeTableHelper.write (out, $ex);
         }
         break;
       }

       case 4:  // reservation/ReservationService/getReservations
       {
         try {
           int customerId = in.read_long ();
           ro.pub.cs.aipi.lab05.reservation.ReservationInformation $result[] = null;
           $result = this.getReservations (customerId);
           out = $rh.createReply();
           ro.pub.cs.aipi.lab05.reservation.ReservationsHelper.write (out, $result);
         } catch (ro.pub.cs.aipi.lab05.reservation.UnspecifiedTimeTable $ex) {
           out = $rh.createExceptionReply ();
           ro.pub.cs.aipi.lab05.reservation.UnspecifiedTimeTableHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:reservation/ReservationService:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public ReservationService _this() 
  {
    return ReservationServiceHelper.narrow(
    super._this_object());
  }

  public ReservationService _this(org.omg.CORBA.ORB orb) 
  {
    return ReservationServiceHelper.narrow(
    super._this_object(orb));
  }


} // class ReservationServicePOA
